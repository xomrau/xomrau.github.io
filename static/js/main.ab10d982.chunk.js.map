{"version":3,"sources":["components/TopBar.js","components/constants/works.js","components/Content.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","href","TopBar","works","img","title","description","url","Intro","target","rel","Work","props","id","map","work","src","alt","About","Content","Footer","fontSize","App","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iVAGMA,G,YAAS,WACX,OAAQ,yBAAKC,UAAU,WACnB,4BACI,wBAAIA,UAAU,YAAW,uBAAGC,KAAK,SAAR,SACzB,wBAAID,UAAU,YAAW,uBAAGC,KAAK,UAAR,UACzB,wBAAID,UAAU,YAAW,uBAAGC,KAAK,YAAR,gBAgBtBC,EAXA,WACX,OAAQ,yBAAKF,UAAU,WACnB,yBAAKA,UAAU,aACX,uBAAGA,UAAU,QAAb,iBAGA,kBAAC,EAAD,SCVGG,G,MATD,CACV,CACIC,IAAK,8FACLC,MAAO,yBACPC,YAAa,sDACbC,IAAK,iDCDPC,EAAQ,WAEV,OAAQ,6BAASR,UAAU,eACvB,4DAAiC,6BAAjC,4BAAgE,6BAAhE,gBAAmF,0BAAMA,UAAU,QAAO,uBAAGC,KAAK,4BAA4BQ,OAAO,SAASC,IAAI,uBAAxD,WAA1G,+BAIFC,EAAO,SAACC,GACV,OAAQ,6BAASZ,UAAU,cACvB,wBAAIa,GAAG,OAAOb,UAAU,UAAxB,6BACA,yBAAKA,UAAU,QACX,4BACKG,EAAMW,KAAI,SAAAC,GAAI,OACX,wBAAIf,UAAU,aACV,yBAAKA,UAAU,YAAW,uBAAGC,KAAMc,EAAKR,IAAKE,OAAO,SAASC,IAAI,uBAAsB,yBAAKV,UAAU,WAAWgB,IAAKD,EAAKX,IAAKa,IAAI,QACpI,uBAAGjB,UAAU,cAAce,EAAKV,MAAhC,OACA,uBAAGL,UAAU,oBAAoBe,EAAKT,qBAQxDY,EAAQ,WACV,OAAQ,6BAASlB,UAAU,SACvB,wBAAIa,GAAG,QAAQb,UAAU,UAAzB,8BACA,+CAAoB,6BAApB,uEAYOmB,EARC,WACZ,OAAQ,yBAAKnB,UAAU,WACnB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,iCCnBOoB,G,MAdA,WACX,OAAQ,4BAAQpB,UAAU,UACtB,yBAAKA,UAAU,aACX,2CAAgB,6BAAhB,yBAA4C,0BAAMA,UAAU,QAAO,uBAAGC,KAAK,6BAAR,UACnE,6DACA,wBAAID,UAAU,UACV,wBAAIA,UAAU,eAAc,uBAAGC,KAAK,kDAAkDQ,OAAO,SAASC,IAAI,uBAAsB,kBAAC,IAAD,CAAcW,SAAS,cACvJ,wBAAIrB,UAAU,eAAc,uBAAGC,KAAK,4BAA4BQ,OAAO,SAASC,IAAI,uBAAsB,kBAAC,IAAD,CAAYW,SAAS,gBAGvI,uBAAGrB,UAAU,aAAb,mCCTasB,E,uKAEjB,OAAQ,yBAAKtB,UAAU,OACrB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAL2BuB,IAAMC,WCKnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ab10d982.chunk.js","sourcesContent":["import React from 'react';\nimport './TopBar.css';\n\nconst NavBar = () => {\n    return (<div className=\"nav-bar\">\n        <ul>\n            <li className=\"nav-item\"><a href=\"#work\">Work</a></li>\n            <li className=\"nav-item\"><a href=\"#about\">About</a></li>\n            <li className=\"nav-item\"><a href=\"#contact\">Contact</a></li>\n        </ul>\n    </div>);\n};\n\nconst TopBar = () => {\n    return (<div className=\"top-bar\">\n        <div className=\"container\">\n            <p className=\"name\">It's Danny L.</p>\n            {/*<div className=\"logo\"><img src=\"https://via.placeholder.com/50\" alt=\"logo\"></img></div>\n            */}\n            <NavBar />\n        </div>\n    </div>);\n};\n\nexport default TopBar;","const works = [\n    {\n        img: \"https://raw.githubusercontent.com/xomrau/xomrau.github.io/assets/subject-line-assistant.jpg\",\n        title: \"Subject Line Assistant\",\n        description: \"A tool that converts subject line into encoded one.\",\n        url: \"https://subject-line-assistant.netlify.app/\"\n    }\n];\n\nexport default works","import React from 'react';\nimport './Content.css';\nimport works from './constants/works';\n\nconst Intro = () => {\n    //TODO\n    return (<section className=\"intro pb-50\">\n        <p>I put some of my projects here<br />Hope you enjoy your stay <br />Check out my <span className=\"link\"><a href=\"https://github.com/xomrau\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a></span> for what I'm working on!</p>\n    </section>);\n};\n\nconst Work = (props) => {\n    return (<section className=\"main pb-50\">\n        <h2 id=\"work\" className=\"header\">&#8226;THINGS I MADE&#8226;</h2>\n        <div className=\"work\">\n            <ul>\n                {works.map(work => (\n                    <li className=\"work-item\">\n                        <div className=\"work-img\"><a href={work.url} target=\"_blank\" rel=\"noopener noreferrer\"><img className=\"proj-img\" src={work.img} alt=\".\" /></a></div>\n                        <p className=\"work-title\">{work.title} - </p>\n                        <p className=\"work-description\">{work.description}</p>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    </section>);\n};\n\nconst About = () => {\n    return (<section className=\"pb-50\">\n        <h2 id=\"about\" className=\"header\">&#8226;A BIT ABOUT ME&#8226;</h2>\n        <p>I'm into web dev.<br />Creating tools and apps that make my daily tasks more efficient. </p>\n    </section>);\n};\n\nconst Content = () => {\n    return (<div className=\"content\">\n        <Intro />\n        <Work />\n        <About />\n    </div>)\n};\n\nexport default Content;","import React from 'react';\n//import { makeStyles } from '@material-ui/core/styles';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport './Footer.css';\n\nconst Footer = () => {\n    return (<footer className=\"footer\">\n        <div className=\"container\">\n            <p>Want to chat?<br />Feel free to email me <span className=\"link\"><a href=\"mailto: hle3524@gmail.com\">here</a></span></p>\n            <p>You can check my socials, too.</p>\n            <ul className=\"social\">\n                <li className=\"social-item\"><a href=\"https://www.linkedin.com/in/daniel-l-14b652164/\" target=\"_blank\" rel=\"noopener noreferrer\"><LinkedInIcon fontSize=\"inherit\" /></a></li>\n                <li className=\"social-item\"><a href=\"https://github.com/xomrau\" target=\"_blank\" rel=\"noopener noreferrer\"><GitHubIcon fontSize=\"inherit\" /></a></li>\n            </ul>\n        </div>\n        <p className=\"copyright\">Copyright &#169; 2020 Danny L.</p>\n    </footer>);\n}\n\nexport default Footer;","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport TopBar from './components/TopBar';\nimport Content from './components/Content';\nimport Footer from './components/Footer';\n\nexport default class App extends React.Component {\n  render() {\n    return (<div className=\"App\">\n      <TopBar />\n      <Content />\n      <Footer />\n    </div>);\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}